# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Generated by Django 5.2.7 on 2025-10-29 17:54

from django.db import migrations


def walk_and_transform(data):
    """Recursively walk through the block tree and transform buttons wherever found."""
    if isinstance(data, dict):
        # Transform buttons field if it exists and is a list
        if "buttons" in data and isinstance(data["buttons"], list):
            data["buttons"] = transform_button_list(data["buttons"])
        if "cta" in data and isinstance(data["cta"], list):
            data["cta"] = transform_button_list(data["cta"])

        # Recursively transform nested structures
        for key, value in data.items():
            if isinstance(value, (dict, list)):
                data[key] = walk_and_transform(value)

    elif isinstance(data, list):
        for i, item in enumerate(data):
            if isinstance(item, (dict, list)):
                data[i] = walk_and_transform(item)

    return data


def transform_button_list(buttons):
    """
    Transform button links to LinkBlock format.

    Old format (link):
    [
        {
            'type': 'button',
            'value': {
                'settings': {
                    'external': False,
                    ...
                },
                'link': 'url',
                'page': None,
                'label': 'text'
            },
            'id': '...'
        }
    ]

    Old format (page):
    [
        {
            'type': 'button',
            'value': {
                'settings': {
                    'external': False,
                    ...
                },
                'link': None,
                'page': <PAGE_ID>,
                'label': 'text'
            },
            'id': '...'
        }
    ]

    New format (link):
    [
        {
            'type': 'button',
            'value': {
                'settings': {...},
                'link': {
                    'link_to': 'custom_url',
                    'page': None,
                    'file': None,
                    'custom_url': '/my-url/',
                    'anchor': None,
                    'email': None,
                    'phone': None,
                    'new_window': False,
                },
                'label': 'text'
            },
            'id': '...'
        }
    ]


    New format (page):
    [
        {
            'type': 'button',
            'value': {
                'settings': {...},
                'link': {
                    'link_to': 'page',
                    'page': <PAGE_ID>,
                    'file': None,
                    'custom_url': '',
                    'anchor': None,
                    'email': None,
                    'phone': None,
                    'new_window': False,
                },
                'label': 'text'
            },
            'id': '...'
        }
    ]
    """

    new_buttons = []
    for button in buttons:
        new_button = {**button}
        value = new_button.get("value", {})
        new_button["value"]["link"] = {
            "link_to": "custom_url" if value.get("link") else "page",
            "page": value.get("page") if value.get("page") else None,
            "custom_url": value.get("link") if value.get("link") else "",
            "new_window": value.get("settings", {}).get("external", False),
            "file": None,
            "anchor": None,
            "email": None,
            "phone": None,
        }
        new_buttons.append(new_button)

    return new_buttons


def convert_links(apps, schema_editor):
    FreeFormPage = apps.get_model("cms", "FreeFormPage")
    WhatsNewPage = apps.get_model("cms", "WhatsNewPage")
    for page in WhatsNewPage.objects.filter(content__icontains="banner"):
        updated_value = walk_and_transform(list(page.content.raw_data))
        page.content.raw_data = updated_value
        page.save(update_fields=["content"])

    for page in FreeFormPage.objects.filter(content__icontains="banner"):
        updated_value = walk_and_transform(list(page.content.raw_data))
        page.content.raw_data = updated_value
        page.save(update_fields=["content"])


class Migration(migrations.Migration):
    dependencies = [
        ("cms", "0019_auto_20251027_1338"),
    ]

    operations = [
        migrations.RunPython(convert_links, migrations.RunPython.noop),
    ]
