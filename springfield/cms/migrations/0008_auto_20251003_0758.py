# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Generated by Django 5.2.6 on 2025-10-03 14:58

from copy import deepcopy

from django.db import migrations

from wagtail.blocks.migrations.migrate_operation import MigrateStreamData
from wagtail.blocks.migrations.operations import BaseBlockOperation


class ChangeButtonToUseSettingsBlockOperation(BaseBlockOperation):
    def apply(self, block_value):
        value = deepcopy(block_value)
        return self._walk_and_transform(value)

    def _walk_and_transform(self, data):
        """Recursively walk through the block tree and transform buttons wherever found."""
        if isinstance(data, dict):
            if "buttons" in data and isinstance(data["buttons"], list):
                data["buttons"] = self._transform_button_list(data["buttons"])

            for key, value in data.items():
                if isinstance(value, (dict, list)):
                    data[key] = self._walk_and_transform(value)

        elif isinstance(data, list):
            for i, item in enumerate(data):
                if isinstance(item, (dict, list)):
                    data[i] = self._walk_and_transform(item)

        return data

    def _transform_button_list(self, buttons):
        """Transform a list of buttons to use the new settings block structure."""
        new_buttons = []
        for button in buttons:
            new_button = {**button}
            value = button.get("value", {})
            new_button["value"] = {
                **value,
                "settings": {
                    "theme": value.get("theme"),
                    "icon": value.get("icon"),
                    "icon_position": value.get("icon_position", "right"),
                },
            }
            new_buttons.append(new_button)
        return new_buttons

    @property
    def operation_name_fragment(self):
        return "change_button_to_use_settings_block"


class ChangeInlineNotificationToUseSettingsBlockOperation(BaseBlockOperation):
    def apply(self, block_value):
        value = deepcopy(block_value)
        return self._transform_notification(value)

    def _transform_notification(self, notification):
        """Transform an inline notification to use the new settings block structure."""
        new_notification = {**notification}
        new_notification["settings"] = {
            "color": notification.get("color"),
            "icon": notification.get("icon"),
            "inverted": notification.get("inverted"),
            "closable": notification.get("closable"),
            "show_to": notification.get("show_to"),
        }
        return new_notification

    @property
    def operation_name_fragment(self):
        return "change_inline_notification_to_use_settings_block"


class ChangeCardsToUseSettingsBlockOperation(BaseBlockOperation):
    def apply(self, block_value):
        value = deepcopy(block_value)
        return self._walk_and_transform(value)

    @property
    def operation_name_fragment(self):
        return "change_cards_to_use_settings_block"

    def _walk_and_transform(self, data):
        """Recursively walk through the block tree and transform buttons wherever found."""
        if isinstance(data, dict):
            if "cards" in data and isinstance(data["cards"], list):
                data["cards"] = self._transform_cards_list(data["cards"])

            for key, value in data.items():
                if isinstance(value, (dict, list)):
                    data[key] = self._walk_and_transform(value)

        elif isinstance(data, list):
            for i, item in enumerate(data):
                if isinstance(item, (dict, list)):
                    data[i] = self._walk_and_transform(item)

        return data

    def _transform_cards_list(self, cards):
        """Transform a list of buttons to use the new settings block structure."""
        new_cards = []
        for card in cards:
            new_card = {**card}
            value = card.get("value", {})
            new_card["value"]["settings"] = {
                "expand_link": value.get("expand_link"),
            }
            if "image_after" in value:
                new_card["value"]["settings"]["image_after"] = value["image_after"]
            new_cards.append(new_card)
        return new_cards


class ChangeMediaContentToUseSettingsBlockOperation(BaseBlockOperation):
    def apply(self, block_value):
        value = deepcopy(block_value)
        return self._walk_and_transform(value)

    @property
    def operation_name_fragment(self):
        return "change_media_content_to_use_settings_block"

    def _walk_and_transform(self, data):
        """Recursively walk through the block tree and transform buttons wherever found."""
        if isinstance(data, dict):
            if "content" in data and isinstance(data["content"], list):
                data["content"] = self._transform_media_content(data["content"])

            for key, value in data.items():
                if isinstance(value, (dict, list)):
                    data[key] = self._walk_and_transform(value)

        elif isinstance(data, list):
            for i, item in enumerate(data):
                if isinstance(item, (dict, list)):
                    data[i] = self._walk_and_transform(item)

        return data

    def _transform_media_content(self, content_list):
        """Transform a list of media content blocks to use the new settings block structure."""
        new_content_list = []
        for item in content_list:
            if item.get("type") != "media_content":
                new_content_list.append(item)
            else:
                new_media_content = {**item}
                value = item.get("value", {})
                new_media_content["value"]["settings"] = {
                    "media_after": value.get("media_after"),
                }
                new_content_list.append(new_media_content)
        return new_content_list
        return new_media_content


class ChangeBannerToUseSettingsBlockOperation(BaseBlockOperation):
    def apply(self, block_value):
        value = deepcopy(block_value)
        return self._transform_notification(value)

    def _transform_notification(self, banner):
        """Transform a banner to use the new settings block structure."""
        new_banner = {**banner}
        new_banner["settings"] = {
            "show_to": banner.get("show_to"),
        }
        return new_banner

    @property
    def operation_name_fragment(self):
        return "change_banner_to_use_settings_block"


class ChangeIntroToUseSettingsBlockOperation(BaseBlockOperation):
    def apply(self, block_value):
        value = deepcopy(block_value)
        return self._transform_intro(value)

    def _transform_intro(self, intro):
        """Transform an intro to use the new settings block structure."""
        new_intro = {**intro}
        new_intro["settings"] = {
            "media_position": intro.get("media_position"),
        }
        return new_intro

    @property
    def operation_name_fragment(self):
        return "change_intro_to_use_settings_block"


operations = [
    (ChangeButtonToUseSettingsBlockOperation(), "intro"),
    (ChangeIntroToUseSettingsBlockOperation(), "intro"),
    (ChangeButtonToUseSettingsBlockOperation(), "section"),
    (ChangeMediaContentToUseSettingsBlockOperation(), "section"),
    (ChangeInlineNotificationToUseSettingsBlockOperation(), "inline_notification"),
    (ChangeCardsToUseSettingsBlockOperation(), "section"),
    (ChangeBannerToUseSettingsBlockOperation(), "banner"),
]


class Migration(migrations.Migration):
    dependencies = [
        ("cms", "0007_freeformpage_whatsnewindexpage_and_more"),
    ]

    operations = [
        MigrateStreamData(app_name="cms", model_name="FreeFormPage", field_name="content", operations_and_block_paths=operations),
        MigrateStreamData(app_name="cms", model_name="WhatsNewPage", field_name="content", operations_and_block_paths=operations),
    ]
