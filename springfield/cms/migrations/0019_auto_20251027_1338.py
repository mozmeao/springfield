# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Generated by Django 5.2.7 on 2025-10-27 20:38


from django.db import migrations


def walk_and_transform(data):
    """Recursively walk through the block tree and transform buttons wherever found."""
    if isinstance(data, dict):
        # Transform buttons field if it exists and is a list
        if "buttons" in data and isinstance(data["buttons"], list):
            data["buttons"] = transform_button_list(data["buttons"])

        # Recursively transform nested structures
        for key, value in data.items():
            if isinstance(value, (dict, list)):
                data[key] = walk_and_transform(value)

    elif isinstance(data, list):
        for i, item in enumerate(data):
            if isinstance(item, (dict, list)):
                data[i] = walk_and_transform(item)

    return data


def transform_button_list(buttons):
    """
    Transform a list of buttons to StreamValue format.

    Old format (with "type": "item"):
    [
        {
            'type': 'item',
            'value': {
                'settings': {...},
                'link': 'url',
                'label': 'text'
            },
            'id': '...'
        }
    ]

    Or old format (direct ButtonValue):
    [
        {
            'settings': {...},
            'link': 'url',
            'label': 'text'
        }
    ]

    New format:
    [
        {
            'type': 'button',
            'value': {
                'settings': {...},
                'link': 'url',
                'label': 'text'
            },
            'id': '...'
        }
    ]
    """
    new_buttons = []
    for button in buttons:
        if isinstance(button, dict):
            # Check if this has 'type' key
            if "type" in button:
                # Has a type field - check if it needs conversion
                if button["type"] == "item":
                    # Convert "item" to "button"
                    new_button = {
                        "type": "button",
                        "value": button.get("value", {}),
                        "id": button.get("id"),
                    }
                    new_buttons.append(new_button)
                elif button["type"] == "button":
                    # Already correct, keep as is
                    new_buttons.append(button)
                else:
                    # Unknown type, keep as is
                    new_buttons.append(button)
            elif "value" in button:
                # Has 'value' but no 'type' - add type: button
                new_button = {
                    "type": "button",
                    "value": button["value"],
                    "id": button.get("id"),
                }
                new_buttons.append(new_button)
            else:
                # Direct button data (old format without type/value wrapper)
                # Wrap it in the proper structure
                new_button = {
                    "type": "button",
                    "value": button,
                    "id": button.get("id"),
                }
                # Remove 'id' from value if it exists there
                if "id" in new_button["value"]:
                    del new_button["value"]["id"]
                new_buttons.append(new_button)
        else:
            # Unknown format, keep as is
            new_buttons.append(button)

    return new_buttons


def convert_buttons(apps, schema_editor):
    FreeFormPage = apps.get_model("cms", "FreeFormPage")
    WhatsNewPage = apps.get_model("cms", "WhatsNewPage")
    for page in WhatsNewPage.objects.filter(content__icontains="banner"):
        updated_value = walk_and_transform(list(page.content.raw_data))
        page.content.raw_data = updated_value
        page.save(update_fields=["content"])

    for page in FreeFormPage.objects.filter(content__icontains="banner"):
        updated_value = walk_and_transform(list(page.content.raw_data))
        page.content.raw_data = updated_value
        page.save(update_fields=["content"])


class Migration(migrations.Migration):
    dependencies = [
        ("cms", "0018_alter_freeformpage_content_and_more"),
    ]

    operations = [
        migrations.RunPython(convert_buttons, migrations.RunPython.noop),
    ]
